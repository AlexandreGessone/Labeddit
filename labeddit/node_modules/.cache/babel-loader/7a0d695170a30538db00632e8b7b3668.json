{"ast":null,"code":"var _jsxFileName = \"/Users/alexandregessone/Desktop/labeddit/mello-4eddit9/labeddit/src/components/PostPage/index.js\";\nimport React, { useContext, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport usePostDetail from \"../../hooks/usePostDetail\";\nimport useForm from \"../../hooks/useForm\";\nimport { Helmet } from \"react-helmet-async\";\nimport { languages } from \"../../languages\";\nimport LanguageContext from \"../../contexts/LanguageContext\";\nimport { createComment } from \"../../functions/axios\";\nimport PostCard from \"../PostCard\";\nimport CommentCard from \"../CommentCard\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { SortWrapper, Container, NewComment, Form } from \"./styles\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\"\n  }\n}));\n\nconst PostPage = () => {\n  const [selectedLanguage] = useContext(LanguageContext);\n  const classes = useStyles();\n  const {\n    postId\n  } = useParams();\n  const [post, getPostDetails] = usePostDetail(postId);\n  const [form, handleInputChange, resetForm] = useForm({\n    text: \"\"\n  });\n  const history = useHistory();\n  const [order, setOrder] = useState(\"created_new\");\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    await createComment(post.id, form);\n    resetForm();\n    getPostDetails(postId);\n  };\n\n  const handleOrderChange = event => {\n    setOrder(event.target.value);\n  };\n\n  let orderedComments;\n\n  if (post) {\n    orderedComments = post.comments;\n\n    switch (order) {\n      case \"created_new\":\n        orderedComments.sort((a, b) => b.createdAt - a.createdAt);\n        break;\n\n      case \"created_old\":\n        orderedComments.sort((a, b) => a.createdAt - b.createdAt);\n        break;\n\n      case \"votes_more\":\n        orderedComments.sort((a, b) => b.votesCount - a.votesCount);\n        break;\n\n      case \"votes_less\":\n        orderedComments.sort((a, b) => a.votesCount - b.votesCount);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return post ? /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, post.title)), /*#__PURE__*/React.createElement(PostCard, {\n    key: post.id,\n    postId: post.id,\n    userName: post.username,\n    title: post.title,\n    text: post.text,\n    commentsCount: post.commentsCount,\n    votesCount: post.votesCount,\n    userVoteDirection: post.userVoteDirection,\n    createdAt: post.createdAt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewComment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"text\",\n    value: form.text,\n    onChange: handleInputChange,\n    placeholder: languages[selectedLanguage].commentPlaceholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, languages[selectedLanguage].sendComment))), /*#__PURE__*/React.createElement(SortWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, languages[selectedLanguage].sortLabel, \" \", /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleOrderChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"created_new\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, languages[selectedLanguage].newest), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"created_old\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, languages[selectedLanguage].oldest), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"votes_more\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, languages[selectedLanguage].upvotes), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"votes_less\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, languages[selectedLanguage].downvotes)))), orderedComments.map(comment => /*#__PURE__*/React.createElement(CommentCard, {\n    key: comment.id,\n    postId: post.id,\n    comment: comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default PostPage;","map":{"version":3,"sources":["/Users/alexandregessone/Desktop/labeddit/mello-4eddit9/labeddit/src/components/PostPage/index.js"],"names":["React","useContext","useState","useHistory","useParams","usePostDetail","useForm","Helmet","languages","LanguageContext","createComment","PostCard","CommentCard","makeStyles","CircularProgress","SortWrapper","Container","NewComment","Form","useStyles","theme","root","display","justifyContent","alignItems","height","PostPage","selectedLanguage","classes","postId","post","getPostDetails","form","handleInputChange","resetForm","text","history","order","setOrder","handleFormSubmit","event","preventDefault","id","handleOrderChange","target","value","orderedComments","comments","sort","a","b","createdAt","votesCount","title","username","commentsCount","userVoteDirection","commentPlaceholder","sendComment","sortLabel","newest","oldest","upvotes","downvotes","map","comment"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport usePostDetail from \"../../hooks/usePostDetail\";\nimport useForm from \"../../hooks/useForm\";\n\nimport { Helmet } from \"react-helmet-async\";\n\nimport { languages } from \"../../languages\";\nimport LanguageContext from \"../../contexts/LanguageContext\";\n\nimport { createComment } from \"../../functions/axios\";\n\nimport PostCard from \"../PostCard\";\nimport CommentCard from \"../CommentCard\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport { SortWrapper, Container, NewComment, Form } from \"./styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\",\n  },\n}));\n\nconst PostPage = () => {\n  const [selectedLanguage] = useContext(LanguageContext);\n  const classes = useStyles();\n  const { postId } = useParams();\n  const [post, getPostDetails] = usePostDetail(postId);\n  const [form, handleInputChange, resetForm] = useForm({ text: \"\" });\n  const history = useHistory();\n  const [order, setOrder] = useState(\"created_new\");\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    await createComment(post.id, form);\n    resetForm();\n    getPostDetails(postId);\n  };\n\n  const handleOrderChange = (event) => {\n    setOrder(event.target.value);\n  };\n\n  let orderedComments;\n  if (post) {\n    orderedComments = post.comments;\n    switch (order) {\n      case \"created_new\":\n        orderedComments.sort((a, b) => b.createdAt - a.createdAt);\n        break;\n      case \"created_old\":\n        orderedComments.sort((a, b) => a.createdAt - b.createdAt);\n        break;\n      case \"votes_more\":\n        orderedComments.sort((a, b) => b.votesCount - a.votesCount);\n        break;\n      case \"votes_less\":\n        orderedComments.sort((a, b) => a.votesCount - b.votesCount);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return post ? (\n    <Container>\n      <Helmet>\n        <title>{post.title}</title>\n      </Helmet>\n      <PostCard\n        key={post.id}\n        postId={post.id}\n        userName={post.username}\n        title={post.title}\n        text={post.text}\n        commentsCount={post.commentsCount}\n        votesCount={post.votesCount}\n        userVoteDirection={post.userVoteDirection}\n        createdAt={post.createdAt}\n      />\n      <NewComment>\n        <Form onSubmit={handleFormSubmit}>\n          <textarea\n            name=\"text\"\n            value={form.text}\n            onChange={handleInputChange}\n            placeholder={languages[selectedLanguage].commentPlaceholder}\n          />\n          <button type=\"submit\">\n            {languages[selectedLanguage].sendComment}\n          </button>\n        </Form>\n      </NewComment>\n      <SortWrapper>\n        <div />\n        <label>\n          {languages[selectedLanguage].sortLabel}{\" \"}\n          <select onChange={handleOrderChange}>\n            <option value=\"created_new\">\n              {languages[selectedLanguage].newest}\n            </option>\n            <option value=\"created_old\">\n              {languages[selectedLanguage].oldest}\n            </option>\n            <option value=\"votes_more\">\n              {languages[selectedLanguage].upvotes}\n            </option>\n            <option value=\"votes_less\">\n              {languages[selectedLanguage].downvotes}\n            </option>\n          </select>\n        </label>\n      </SortWrapper>\n      {orderedComments.map((comment) => (\n        <CommentCard key={comment.id} postId={post.id} comment={comment} />\n      ))}\n    </Container>\n  ) : (\n    <div className={classes.root}>\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}