{"ast":null,"code":"var _jsxFileName = \"/Users/alexandregessone/Desktop/labeddit/mello-4eddit9/labeddit/src/components/FeedPage/index.js\";\nimport React, { useState } from \"react\";\nimport usePosts from \"../../hooks/usePosts\";\nimport { Helmet } from \"react-helmet-async\";\nimport PostForm from \"../PostForm\";\nimport PostCard from \"../PostCard\";\nimport FeedFilter from \"../FeedFilter\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\"\n  }\n}));\n\nconst FeedPage = () => {\n  const [posts, getPosts] = usePosts();\n  const classes = useStyles();\n  const [order, setOrder] = useState(\"created_new\");\n  const [search, setSearch] = useState();\n  let orderedPosts;\n\n  if (posts) {\n    orderedPosts = posts;\n\n    switch (order) {\n      case \"created_new\":\n        orderedPosts.sort((a, b) => b.createdAt - a.createdAt);\n        break;\n\n      case \"created_old\":\n        orderedPosts.sort((a, b) => a.createdAt - b.createdAt);\n        break;\n\n      case \"votes_more\":\n        orderedPosts.sort((a, b) => b.votesCount - a.votesCount);\n        break;\n\n      case \"votes_less\":\n        orderedPosts.sort((a, b) => a.votesCount - b.votesCount);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (orderedPosts && search) {\n    const searchWords = search.split(\" \");\n    searchWords.forEach(word => orderedPosts = orderedPosts.filter(post => post.title.toLowerCase().includes(word.toLowerCase()) || post.text.toLowerCase().includes(word.toLowerCase()) || post.username.toLowerCase().includes(word.toLowerCase()))); // Desse jeito todas as palavras tinham que estar presentes no mesmo campo\n    // pode ser util em outra ocasiao, deixarei aqui para referencia\n    // const regex = new RegExp(\n    //   search\n    //     .split(\" \")\n    //     .map((item) => `(?=.*${item})`)\n    //     .join(\"\"),\n    //   \"i\"\n    // );\n    // orderedPosts = orderedPosts.filter(\n    //   (post) =>\n    //     regex.test(post.title) ||\n    //     regex.test(post.text) ||\n    //     regex.test(post.username)\n    // );\n  }\n\n  return posts.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"LabEddit\")), /*#__PURE__*/React.createElement(PostForm, {\n    getPosts: getPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FeedFilter, {\n    setOrder: setOrder,\n    setSearch: setSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), orderedPosts.map(post => /*#__PURE__*/React.createElement(PostCard, {\n    key: post.id,\n    postId: post.id,\n    userName: post.username,\n    title: post.title,\n    text: post.text,\n    commentsCount: post.commentsCount,\n    votesCount: post.votesCount,\n    userVoteDirection: post.userVoteDirection,\n    createdAt: post.createdAt,\n    feedpage: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FeedPage;","map":{"version":3,"sources":["/Users/alexandregessone/Desktop/labeddit/mello-4eddit9/labeddit/src/components/FeedPage/index.js"],"names":["React","useState","usePosts","Helmet","PostForm","PostCard","FeedFilter","makeStyles","CircularProgress","useStyles","theme","root","display","justifyContent","alignItems","height","FeedPage","posts","getPosts","classes","order","setOrder","search","setSearch","orderedPosts","sort","a","b","createdAt","votesCount","searchWords","split","forEach","word","filter","post","title","toLowerCase","includes","text","username","length","map","id","commentsCount","userVoteDirection"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,cAAc,EAAE,QAFZ;AAGJC,IAAAA,UAAU,EAAE,QAHR;AAIJC,IAAAA,MAAM,EAAE;AAJJ;AADiC,CAAZ,CAAD,CAA5B;;AASA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,EAAlC;AACA,QAAMiB,OAAO,GAAGV,SAAS,EAAzB;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,aAAD,CAAlC;AACA,QAAM,CAACqB,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,EAApC;AAEA,MAAIuB,YAAJ;;AACA,MAAIP,KAAJ,EAAW;AACTO,IAAAA,YAAY,GAAGP,KAAf;;AACA,YAAQG,KAAR;AACE,WAAK,aAAL;AACEI,QAAAA,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAA5C;AACA;;AACF,WAAK,aAAL;AACEJ,QAAAA,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAA5C;AACA;;AACF,WAAK,YAAL;AACEJ,QAAAA,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACE,UAAF,GAAeH,CAAC,CAACG,UAA7C;AACA;;AACF,WAAK,YAAL;AACEL,QAAAA,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACG,UAAF,GAAeF,CAAC,CAACE,UAA7C;AACA;;AACF;AACE;AAdJ;AAgBD;;AAED,MAAIL,YAAY,IAAIF,MAApB,EAA4B;AAC1B,UAAMQ,WAAW,GAAGR,MAAM,CAACS,KAAP,CAAa,GAAb,CAApB;AACAD,IAAAA,WAAW,CAACE,OAAZ,CACGC,IAAD,IACGT,YAAY,GAAGA,YAAY,CAACU,MAAb,CACbC,IAAD,IACEA,IAAI,CAACC,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCL,IAAI,CAACI,WAAL,EAAlC,KACAF,IAAI,CAACI,IAAL,CAAUF,WAAV,GAAwBC,QAAxB,CAAiCL,IAAI,CAACI,WAAL,EAAjC,CADA,IAEAF,IAAI,CAACK,QAAL,CAAcH,WAAd,GAA4BC,QAA5B,CAAqCL,IAAI,CAACI,WAAL,EAArC,CAJY,CAFpB,EAF0B,CAW1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,SAAOpB,KAAK,CAACwB,MAAN,GAAe,CAAf,gBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF,eAKE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEvB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAOE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEG,QAAtB;AAAgC,IAAA,SAAS,EAAEE,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EASGC,YAAY,CAACkB,GAAb,CAAkBP,IAAD,iBAChB,oBAAC,QAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACQ,EADZ;AAEE,IAAA,MAAM,EAAER,IAAI,CAACQ,EAFf;AAGE,IAAA,QAAQ,EAAER,IAAI,CAACK,QAHjB;AAIE,IAAA,KAAK,EAAEL,IAAI,CAACC,KAJd;AAKE,IAAA,IAAI,EAAED,IAAI,CAACI,IALb;AAME,IAAA,aAAa,EAAEJ,IAAI,CAACS,aANtB;AAOE,IAAA,UAAU,EAAET,IAAI,CAACN,UAPnB;AAQE,IAAA,iBAAiB,EAAEM,IAAI,CAACU,iBAR1B;AASE,IAAA,SAAS,EAAEV,IAAI,CAACP,SATlB;AAUE,IAAA,QAAQ,MAVV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CATH,CADK,gBA0BL;AAAK,IAAA,SAAS,EAAET,OAAO,CAACR,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA1BF;AA8BD,CArFD;;AAuFA,eAAeK,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport usePosts from \"../../hooks/usePosts\";\n\nimport { Helmet } from \"react-helmet-async\";\n\nimport PostForm from \"../PostForm\";\nimport PostCard from \"../PostCard\";\nimport FeedFilter from \"../FeedFilter\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\",\n  },\n}));\n\nconst FeedPage = () => {\n  const [posts, getPosts] = usePosts();\n  const classes = useStyles();\n  const [order, setOrder] = useState(\"created_new\");\n  const [search, setSearch] = useState();\n\n  let orderedPosts;\n  if (posts) {\n    orderedPosts = posts;\n    switch (order) {\n      case \"created_new\":\n        orderedPosts.sort((a, b) => b.createdAt - a.createdAt);\n        break;\n      case \"created_old\":\n        orderedPosts.sort((a, b) => a.createdAt - b.createdAt);\n        break;\n      case \"votes_more\":\n        orderedPosts.sort((a, b) => b.votesCount - a.votesCount);\n        break;\n      case \"votes_less\":\n        orderedPosts.sort((a, b) => a.votesCount - b.votesCount);\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (orderedPosts && search) {\n    const searchWords = search.split(\" \");\n    searchWords.forEach(\n      (word) =>\n        (orderedPosts = orderedPosts.filter(\n          (post) =>\n            post.title.toLowerCase().includes(word.toLowerCase()) ||\n            post.text.toLowerCase().includes(word.toLowerCase()) ||\n            post.username.toLowerCase().includes(word.toLowerCase())\n        ))\n    );\n    // Desse jeito todas as palavras tinham que estar presentes no mesmo campo\n    // pode ser util em outra ocasiao, deixarei aqui para referencia\n    // const regex = new RegExp(\n    //   search\n    //     .split(\" \")\n    //     .map((item) => `(?=.*${item})`)\n    //     .join(\"\"),\n    //   \"i\"\n    // );\n    // orderedPosts = orderedPosts.filter(\n    //   (post) =>\n    //     regex.test(post.title) ||\n    //     regex.test(post.text) ||\n    //     regex.test(post.username)\n    // );\n  }\n\n  return posts.length > 0 ? (\n    <div>\n      <Helmet>\n        <title>LabEddit</title>\n      </Helmet>\n\n      <PostForm getPosts={getPosts} />\n\n      <FeedFilter setOrder={setOrder} setSearch={setSearch} />\n\n      {orderedPosts.map((post) => (\n        <PostCard\n          key={post.id}\n          postId={post.id}\n          userName={post.username}\n          title={post.title}\n          text={post.text}\n          commentsCount={post.commentsCount}\n          votesCount={post.votesCount}\n          userVoteDirection={post.userVoteDirection}\n          createdAt={post.createdAt}\n          feedpage\n        />\n      ))}\n    </div>\n  ) : (\n    <div className={classes.root}>\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n};\n\nexport default FeedPage;\n"]},"metadata":{},"sourceType":"module"}