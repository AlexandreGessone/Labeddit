{"ast":null,"code":"var _jsxFileName = \"/Users/alexandregessone/Desktop/labeddit/mello-4eddit9/labeddit/src/components/PostPage/index.js\";\nimport React, { useContext, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport usePostDetail from \"../../hooks/usePostDetail\";\nimport { Helmet } from \"react-helmet-async\";\nimport { languages } from \"../../languages\";\nimport LanguageContext from \"../../contexts/LanguageContext\";\nimport CommentForm from \"../CommentForm\";\nimport PostCard from \"../PostCard\";\nimport CommentCard from \"../CommentCard\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Container from \"@material-ui/core/Container\";\nimport { SortWrapper, MainContainer } from \"./styles\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\"\n  }\n}));\n\nconst PostPage = () => {\n  const [selectedLanguage] = useContext(LanguageContext);\n  const classes = useStyles();\n  const {\n    postId\n  } = useParams();\n  const [post, getPostDetails] = usePostDetail(postId);\n  const [order, setOrder] = useState(\"created_new\");\n\n  const handleOrderChange = event => {\n    setOrder(event.target.value);\n  };\n\n  let orderedComments;\n\n  if (post) {\n    orderedComments = post.comments;\n\n    switch (order) {\n      case \"created_new\":\n        orderedComments.sort((a, b) => b.createdAt - a.createdAt);\n        break;\n\n      case \"created_old\":\n        orderedComments.sort((a, b) => a.createdAt - b.createdAt);\n        break;\n\n      case \"votes_more\":\n        orderedComments.sort((a, b) => b.votesCount - a.votesCount);\n        break;\n\n      case \"votes_less\":\n        orderedComments.sort((a, b) => a.votesCount - b.votesCount);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return post ? /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, post.title)), /*#__PURE__*/React.createElement(PostCard, {\n    key: post.id,\n    postId: post.id,\n    userName: post.username,\n    title: post.title,\n    text: post.text,\n    commentsCount: post.commentsCount,\n    votesCount: post.votesCount,\n    userVoteDirection: post.userVoteDirection,\n    createdAt: post.createdAt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CommentForm, {\n    postId: postId,\n    getPostDetails: getPostDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SortWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, languages[selectedLanguage].sortLabel, \" \", /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleOrderChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"created_new\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, languages[selectedLanguage].newest), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"created_old\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, languages[selectedLanguage].oldest), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"votes_more\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, languages[selectedLanguage].upvotes), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"votes_less\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, languages[selectedLanguage].downvotes))))), orderedComments.map(comment => /*#__PURE__*/React.createElement(CommentCard, {\n    key: comment.id,\n    postId: post.id,\n    comment: comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default PostPage;","map":{"version":3,"sources":["/Users/alexandregessone/Desktop/labeddit/mello-4eddit9/labeddit/src/components/PostPage/index.js"],"names":["React","useContext","useState","useParams","usePostDetail","Helmet","languages","LanguageContext","CommentForm","PostCard","CommentCard","makeStyles","CircularProgress","Container","SortWrapper","MainContainer","useStyles","theme","root","display","justifyContent","alignItems","height","PostPage","selectedLanguage","classes","postId","post","getPostDetails","order","setOrder","handleOrderChange","event","target","value","orderedComments","comments","sort","a","b","createdAt","votesCount","title","id","username","text","commentsCount","userVoteDirection","marginTop","sortLabel","newest","oldest","upvotes","downvotes","map","comment"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport usePostDetail from \"../../hooks/usePostDetail\";\n\nimport { Helmet } from \"react-helmet-async\";\n\nimport { languages } from \"../../languages\";\nimport LanguageContext from \"../../contexts/LanguageContext\";\n\nimport CommentForm from \"../CommentForm\";\nimport PostCard from \"../PostCard\";\nimport CommentCard from \"../CommentCard\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Container from \"@material-ui/core/Container\";\n\nimport { SortWrapper, MainContainer } from \"./styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\",\n  },\n}));\n\nconst PostPage = () => {\n  const [selectedLanguage] = useContext(LanguageContext);\n  const classes = useStyles();\n  const { postId } = useParams();\n  const [post, getPostDetails] = usePostDetail(postId);\n  const [order, setOrder] = useState(\"created_new\");\n\n  const handleOrderChange = (event) => {\n    setOrder(event.target.value);\n  };\n\n  let orderedComments;\n  if (post) {\n    orderedComments = post.comments;\n    switch (order) {\n      case \"created_new\":\n        orderedComments.sort((a, b) => b.createdAt - a.createdAt);\n        break;\n      case \"created_old\":\n        orderedComments.sort((a, b) => a.createdAt - b.createdAt);\n        break;\n      case \"votes_more\":\n        orderedComments.sort((a, b) => b.votesCount - a.votesCount);\n        break;\n      case \"votes_less\":\n        orderedComments.sort((a, b) => a.votesCount - b.votesCount);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return post ? (\n    <MainContainer>\n      <Helmet>\n        <title>{post.title}</title>\n      </Helmet>\n      <PostCard\n        key={post.id}\n        postId={post.id}\n        userName={post.username}\n        title={post.title}\n        text={post.text}\n        commentsCount={post.commentsCount}\n        votesCount={post.votesCount}\n        userVoteDirection={post.userVoteDirection}\n        createdAt={post.createdAt}\n      />\n\n      <CommentForm postId={postId} getPostDetails={getPostDetails} />\n\n      <Container maxWidth=\"md\" style={{ marginTop: \"20px\" }}>\n        <SortWrapper>\n          <div />\n          <label>\n            {languages[selectedLanguage].sortLabel}{\" \"}\n            <select onChange={handleOrderChange}>\n              <option value=\"created_new\">\n                {languages[selectedLanguage].newest}\n              </option>\n              <option value=\"created_old\">\n                {languages[selectedLanguage].oldest}\n              </option>\n              <option value=\"votes_more\">\n                {languages[selectedLanguage].upvotes}\n              </option>\n              <option value=\"votes_less\">\n                {languages[selectedLanguage].downvotes}\n              </option>\n            </select>\n          </label>\n        </SortWrapper>\n      </Container>\n      {orderedComments.map((comment) => (\n        <CommentCard key={comment.id} postId={post.id} comment={comment} />\n      ))}\n    </MainContainer>\n  ) : (\n    <div className={classes.root}>\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}